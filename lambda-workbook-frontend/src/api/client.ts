//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LogInRequest | undefined): Promise<IdentityUserDtoOperationResponse> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<IdentityUserDtoOperationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityUserDtoOperationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IdentityUserDtoOperationResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    registerpublic(body: RegisterPublicUserRequest | undefined): Promise<IdentityUserDtoOperationResponse> {
        let url_ = this.baseUrl + "/api/auth/registerpublic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterpublic(_response);
        });
    }

    protected processRegisterpublic(response: Response): Promise<IdentityUserDtoOperationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityUserDtoOperationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IdentityUserDtoOperationResponse>(null as any);
    }

    /**
     * @return OK
     */
    usernoteGET(userId: number): Promise<UserNoteDtoIEnumerableOperationResponse> {
        let url_ = this.baseUrl + "/api/usernote/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsernoteGET(_response);
        });
    }

    protected processUsernoteGET(response: Response): Promise<UserNoteDtoIEnumerableOperationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserNoteDtoIEnumerableOperationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserNoteDtoIEnumerableOperationResponse>(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    usernoteDELETE(id: number | undefined): Promise<OperationResponse> {
        let url_ = this.baseUrl + "/api/usernote?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsernoteDELETE(_response);
        });
    }

    protected processUsernoteDELETE(response: Response): Promise<OperationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    usernotePUT(body: UserNoteDto | undefined): Promise<OperationResponse> {
        let url_ = this.baseUrl + "/api/usernote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsernotePUT(_response);
        });
    }

    protected processUsernotePUT(response: Response): Promise<OperationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OperationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OperationResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    usernotePOST(body: UserNoteDto | undefined): Promise<UserNoteDtoOperationResponse> {
        let url_ = this.baseUrl + "/api/usernote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUsernotePOST(_response);
        });
    }

    protected processUsernotePOST(response: Response): Promise<UserNoteDtoOperationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserNoteDtoOperationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserNoteDtoOperationResponse>(null as any);
    }
}

export class IdentityRoleDto implements IIdentityRoleDto {
    id?: number;
    name?: string | undefined;

    constructor(data?: IIdentityRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): IdentityRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IIdentityRoleDto {
    id?: number;
    name?: string | undefined;
}

export class IdentityUserDto implements IIdentityUserDto {
    id?: number | undefined;
    login?: string | undefined;
    jwtToken?: string | undefined;
    role?: IdentityRoleDto;

    constructor(data?: IIdentityUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.login = _data["login"];
            this.jwtToken = _data["jwtToken"];
            this.role = _data["role"] ? IdentityRoleDto.fromJS(_data["role"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IdentityUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["login"] = this.login;
        data["jwtToken"] = this.jwtToken;
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIdentityUserDto {
    id?: number | undefined;
    login?: string | undefined;
    jwtToken?: string | undefined;
    role?: IdentityRoleDto;
}

export class IdentityUserDtoOperationResponse implements IIdentityUserDtoOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
    result?: IdentityUserDto;

    constructor(data?: IIdentityUserDtoOperationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.failed = _data["failed"];
            this.erorMessage = _data["erorMessage"];
            this.result = _data["result"] ? IdentityUserDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IdentityUserDtoOperationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserDtoOperationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failed"] = this.failed;
        data["erorMessage"] = this.erorMessage;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIdentityUserDtoOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
    result?: IdentityUserDto;
}

export class LogInRequest implements ILogInRequest {
    login?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILogInRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LogInRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LogInRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        return data;
    }
}

export interface ILogInRequest {
    login?: string | undefined;
    password?: string | undefined;
}

export class OperationResponse implements IOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;

    constructor(data?: IOperationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.failed = _data["failed"];
            this.erorMessage = _data["erorMessage"];
        }
    }

    static fromJS(data: any): OperationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OperationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failed"] = this.failed;
        data["erorMessage"] = this.erorMessage;
        return data;
    }
}

export interface IOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
}

export class RegisterPublicUserRequest implements IRegisterPublicUserRequest {
    login?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterPublicUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterPublicUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterPublicUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterPublicUserRequest {
    login?: string | undefined;
    password?: string | undefined;
}

export class UserNoteDto implements IUserNoteDto {
    userId?: number | undefined;
    text?: string | undefined;

    constructor(data?: IUserNoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): UserNoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserNoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["text"] = this.text;
        return data;
    }
}

export interface IUserNoteDto {
    userId?: number | undefined;
    text?: string | undefined;
}

export class UserNoteDtoIEnumerableOperationResponse implements IUserNoteDtoIEnumerableOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
    result?: UserNoteDto[] | undefined;

    constructor(data?: IUserNoteDtoIEnumerableOperationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.failed = _data["failed"];
            this.erorMessage = _data["erorMessage"];
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(UserNoteDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserNoteDtoIEnumerableOperationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserNoteDtoIEnumerableOperationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failed"] = this.failed;
        data["erorMessage"] = this.erorMessage;
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserNoteDtoIEnumerableOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
    result?: UserNoteDto[] | undefined;
}

export class UserNoteDtoOperationResponse implements IUserNoteDtoOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
    result?: UserNoteDto;

    constructor(data?: IUserNoteDtoOperationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.failed = _data["failed"];
            this.erorMessage = _data["erorMessage"];
            this.result = _data["result"] ? UserNoteDto.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserNoteDtoOperationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserNoteDtoOperationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["failed"] = this.failed;
        data["erorMessage"] = this.erorMessage;
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserNoteDtoOperationResponse {
    failed?: boolean;
    erorMessage?: string | undefined;
    result?: UserNoteDto;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}